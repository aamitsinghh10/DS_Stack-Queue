int orangesRotting(vector<vector<int>>& grid) 
{
    if(grid.empty())
        return 0;
    int m=grid.size();
    int n=grid[0].size();int days=0,count=0,total=0;
    
    queue<pair<int,int>> rotten;
    for(int i=0;i<m;i++)
    {
        for(int j=0;j<n;j++)
        {
            if(grid[i][j]!=0)total++;
            if(grid[i][j]==2)
                rotten.push({i,j});
        }
    }
    int dx[4]={0,0,1,-1};
    int dy[4]={1,-1,0,0};
    
    while(!rotten.empty())
    {
        int k=rotten.size();
        count+=k;
        for(int i=0;i<k;i++)
        {
            int x=rotten.front().first;int y=rotten.front().second;
            rotten.pop();
            
            for(int j=0;j<4;j++)
            {
                int nx=x+dx[j];int ny=y+dy[j];
                if(nx<0||ny<0||nx>=m||ny>=n||grid[nx][ny]!=1)
                    continue;
        
                grid[nx][ny]=2;
                rotten.push({nx,ny});
            }
        }
        if(!rotten.empty())
            days++;
    }
    return (count==total)?days:-1;
}
